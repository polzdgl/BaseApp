@page "/"
@using Radzen
@using Radzen.Blazor
<PageTitle>BaseApp Project</PageTitle>

<!-- Base container row/column for consistent spacing -->
<RadzenRow>
    <RadzenColumn Size="12">
        <!-- Main heading -->
        <RadzenText Text="BaseApp Project"
                    TextStyle="TextStyle.DisplayH2"
                    class="mb-3">
        </RadzenText>

        <!-- Subtitle / Tagline -->
        <RadzenText Text="A Blazor WASM + ASP.NET Web API Application"
                    TextStyle="TextStyle.DisplayH5"
                    class="mb-4">
        </RadzenText>

        <!-- Collapsible panels for each major README section -->
        <RadzenPanel>

            <!-- Overview -->
            <RadzenPanel AllowCollapse="true" class="rz-my-10 rz-mx-auto" Style="width: 700px;" Text="Overview" Expanded="true">
                <RadzenText Text="BaseApp is a web application built using a Blazor Web Assembly and an ASP.NET Web API with Controllers. It uses Entity Framework Core with a repository pattern for data access and Microsoft SQL Server as the database. Logging is implemented using Serilog, and API documentation is provided through Swagger."
                            TextStyle="TextStyle.Body1"
                            class="mb-3"
                            Style="font-size: 16px; line-height: 1.5">
                </RadzenText>
            </RadzenPanel>

            <!-- Features -->
            <RadzenPanel AllowCollapse="true" class="rz-my-10 rz-mx-auto" Style="width: 700px;" Text="Features">
                <RadzenText Text="• User Management: Add new User (without Identity Registration), retrieve, and manage user data.
• Import SEC Company Data: Import data based on Ids, retrieve on UI and calculate Funding Amount.
• User Authentication: Register and Login to Authenticate users using ASP.NET Identity Provider
• Data Validation: Includes custom validation logic for phone numbers, email addresses, and dates of birth.
• Logging: Integrated with Serilog for structured and detailed logging.
• API Documentation: Interactive API documentation available via Swagger UI.
• Automated Database Creation: Automatically creates and migrates the database in development environments.
• Unit Testing: Unit tests implemented using xUnit and NSubstitute."
                            TextStyle="TextStyle.Body1"
                            class="rz-mb-3"
                            Style="white-space: pre-line; font-size: 16px; line-height: 1.5">
                </RadzenText>
            </RadzenPanel>

            <!-- Technologies Used -->
            <RadzenPanel AllowCollapse="true" class="rz-my-10 rz-mx-auto" Style="width: 700px;" Text="Technologies Used">
                <RadzenText Text="• Frontend: Blazor WebAssembly with Radzen Components
• Backend: ASP.NET Web API (with Controllers)
• Database: Microsoft SQL Server
• ORM: Entity Framework Core (with Repository Pattern)
• Logging: Serilog
• API Documentation: Swagger (OpenAPI)
• Unit Testing: xUnit with NSubstitute"
                            TextStyle="TextStyle.Body1"
                            Style="white-space: pre-line; font-size: 16px; line-height: 1.5">
                </RadzenText>
            </RadzenPanel>

            <!-- Setup Instructions -->
            <RadzenPanel AllowCollapse="true" class="rz-my-10 rz-mx-auto" Style="width: 700px;" Text="Setup Instructions">
                <RadzenText Text="@(@"### Prerequisites
- .NET SDK 9.0
- Microsoft SQL Server
- Any IDE (Visual Studio, VS Code, JetBrains Rider)

### Steps to Run
1. Clone the repository:
   git clone https://github.com/polzdgl/BaseApp.git

2. Open the solution in your IDE of choice.

3. Navigate to the BaseApp.Server project and update the connection string in appsettings.json:
   {
     ""ConnectionStrings"": {
       ""DefaultConnection"": ""Your-SQL-Server-Connection-String""
     }
   }

4. Set the BaseApp.Server project as the startup project.

5. Run the application in Development mode. The database and required tables will be created automatically.

6. Open the Swagger UI for API documentation:
   http://localhost:&lt;your-port&gt;/swagger
")"
                            TextStyle="TextStyle.Body1"
                            class="rz-mb-3"
                            Style="white-space: pre-wrap; font-size: 16px; line-height: 1.5">
                </RadzenText>

            </RadzenPanel>

            <!-- Unit Testing -->
            <RadzenPanel AllowCollapse="true" class="rz-my-10 rz-mx-auto" Style="width: 700px;" Text="Unit Testing">
                <RadzenText Text="Unit tests are implemented using xUnit with mocking provided by NSubstitute.
To run the tests:

1. Open the solution in your IDE.
2. Navigate to the BaseApp.Tests project.
3. Run the tests using the integrated test runner or via CLI:
   dotnet test
"
                            TextStyle="TextStyle.Body1"
                            Style="white-space: pre-wrap; font-size: 16px; line-height: 1.5">
                </RadzenText>
            </RadzenPanel>

            <!-- Folder Structure -->
            <RadzenPanel AllowCollapse="true" class="rz-my-10 rz-mx-auto" Style="width: 700px;" Text="Folder Structure">
                <RadzenText Text="• BaseApp.Server - The ASP.NET Web API project with Controllers.
• BaseApp.Client - The presentation layer with the Blazor WebAssembly UI using Radzen Components.
• BaseApp.Shared - Contains shared utilities, validation classes, and DTOs.
• BaseApp.Tests - Unit test project using xUnit and NSubstitute.
• BaseApp.Data - The data layer project responsible for managing all data-related operations.
• BaseApp.ServiceProvider - The business layer project with all the application logic.
"
                            TextStyle="TextStyle.Body1"
                            Style="white-space: pre-line; font-size: 16px; line-height: 1.5">
                </RadzenText>
            </RadzenPanel>

            <!-- Additional Notes -->
            <RadzenPanel AllowCollapse="true" class="rz-my-10 rz-mx-auto" Style="width: 700px;" Text="Additional Notes">
                <RadzenText Text="• Development Database: The application is configured to automatically create and migrate the database in the development environment. No manual setup is required.
• Production Configuration: Provide the correct connection string for production deployments.
• Logging: All logs are structured and stored using Serilog for easy debugging and monitoring.
"
                            TextStyle="TextStyle.Body1"
                            Style="white-space: pre-line; font-size: 16px; line-height: 1.5">
                </RadzenText>
            </RadzenPanel>

            <!-- EF Core Migration Scripts -->
            <RadzenPanel AllowCollapse="true" class="rz-my-10 rz-mx-auto" Style="width: 700px;" Text="EF Core Migration Scripts">
                <RadzenText Text="Run this command to create new Migration:
dotnet ef migrations add InitialData --project BaseApp.Data --startup-project BaseApp.Server

Run this command to run EF Core Migration:
dotnet ef database update --project BaseApp.Data --startup-project BaseApp.Server
"
                            TextStyle="TextStyle.Body1"
                            Style="white-space: pre-wrap; font-size: 16px; line-height: 1.5">
                </RadzenText>
            </RadzenPanel>
        </RadzenPanel>
    </RadzenColumn>
</RadzenRow>
